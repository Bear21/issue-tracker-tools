#! /usr/bin/env python
import os
import sys
import webbrowser
from datetime import date
from typing import List

import click

from lib.cfd.cfd_db import store_project_counts
from lib.config import load_jira_config, load_project_config, ReportOptions
from lib.issues.project import Project
from lib.jira.jira_ext import JiraServer
from lib.reports.report_epics import EpicReport
from lib.reports.report_issue_detail import IssueDetailReport
from lib.reports.report_progress import ProgressReport
from lib.reports.report_project import ProjectReport
from lib.reports.report_release_notes import ReleaseNotesReport
from lib.reports.report_resolved import ResolvedReport
from lib.reports.report_working import WorkingReport


@click.group(context_settings=dict(help_option_names=["-h", "--help"]))
@click.option("-v", "--verbose", is_flag=True)
@click.option("-j", "--jira-config", type=click.Path(exists=True))
@click.option("-p", "--project-config", type=click.Path(exists=True))
@click.pass_context
def jira(
    ctx: click.Context,
    verbose: bool,
    project_config: click.Path,
    jira_config: click.Path,
) -> None:
    ctx.obj = build_report_options(verbose, project_config, jira_config)


def build_report_options(
    verbose: bool, project_config_file: click.Path, jira_config_file: click.Path
) -> ReportOptions:
    jira_config_file = jira_config_file or os.path.expanduser("~/jiraconfig.yml")
    if verbose:
        print(f"Using jira config file '{jira_config_file}'")
    jira_config = load_jira_config(jira_config_file)

    project_config_file = project_config_file or jira_config_file
    if verbose:
        print(f"Using project config file '{project_config_file}'")

    project_config = load_project_config(project_config_file)

    return ReportOptions(verbose, project_config, jira_config)


@jira.command()
@click.option("-s", "--subject", default="")
@click.pass_context
def epic_summary(ctx: click.Context, subject: str) -> None:
    """Report on stories within epics."""
    options: ReportOptions = ctx.obj
    server = JiraServer(options.verbose, options.jira_config)
    EpicReport(options, server).run(subject)


def add_fix_version(
    server: JiraServer, issue_keys: List[str], new_fix_version: str
) -> None:
    for key in issue_keys:
        jira_issue = server.jira_issue(key)
        if new_fix_version in jira_issue.fix_versions():
            print(f"{jira_issue.key}: already assigned to {new_fix_version}")
        else:
            jira_issue.add_fix_version(new_fix_version)
            print(f"{jira_issue.key}: added version {new_fix_version}")


@jira.command()
@click.option(
    "-o", "--open", is_flag=True, default=False, help="Open issue in a web browser"
)
@click.option(
    "-f",
    "--update-fix-version",
    is_flag=False,
    type=click.STRING,
    help="Update issue with specified fix version",
)
@click.argument("issue_keys", nargs=-1)
@click.pass_context
def issue(
    ctx: click.Context, open: bool, update_fix_version: str, issue_keys: List[str]
) -> None:
    """Report on issue detail."""
    if not issue_keys:
        sys.exit("issue key required")

    options: ReportOptions = ctx.obj
    server = JiraServer(options.verbose, options.jira_config)

    if open:
        webbrowser.open(f"{options.jira_config.url}/browse/{issue_keys[0]}")
    elif update_fix_version:
        add_fix_version(server, issue_keys, update_fix_version)
    else:
        IssueDetailReport(server, options.verbose).run(issue_keys)


@jira.command()
@click.argument("label")
@click.pass_context
def progress(ctx: click.Context, label: str) -> None:
    """Report on progress for a project."""
    options: ReportOptions = ctx.obj
    csv_file = f"{options.report_dir}/{label}/progress.csv"
    server = JiraServer(options.verbose, options.jira_config)
    ProgressReport(server, options.verbose).run(label, csv_file)


@jira.command()
@click.pass_context
def project(ctx: click.Context) -> None:
    """Report on progress for a project."""
    options: ReportOptions = ctx.obj
    report_date = str(date.today())
    jira_server = JiraServer(options.verbose, options.jira_config)
    project = Project.load(jira_server, options.project_config.project_label)
    ProjectReport(project).run(report_date)
    store_project_counts(report_date, project, options)


@jira.command()
@click.option(
    "-f",
    "--fix-version",
    is_flag=False,
    type=click.STRING,
    default=None,
    help="Include all issues with this fix version",
)
@click.option("-t", "--no-tasks", is_flag=True, default=False, help="Exclude tasks")
@click.option(
    "-m", "--markdown", is_flag=True, default=False, help="Output report as markdown"
)
@click.argument("issue_keys", nargs=-1)
@click.pass_context
def release(
    ctx: click.Context,
    fix_version: str,
    no_tasks: bool,
    markdown: bool,
    issue_keys: List[str],
) -> None:
    """Describes a list of tickets as release notes"""
    options: ReportOptions = ctx.obj
    server = JiraServer(options.verbose, options.jira_config)

    if fix_version:
        fix_issues = server.query_fix_version(fix_version)
        issue_keys = [issue.key for issue in fix_issues]

    if not issue_keys:
        sys.exit("issue keys required for release report")

    ReleaseNotesReport(options, server, no_tasks, markdown).run(issue_keys)


@jira.command()
@click.option(
    "-d",
    "--days",
    type=click.INT,
    help="include issues resovled this many days prior to today",
)
@click.option(
    "-f",
    "--from",
    "from_date",
    type=click.DateTime(formats=["%Y-%m-%d"]),
    help="include resolved issues from this date onwards",
)
@click.option(
    "-t",
    "--to",
    "to_date",
    type=click.DateTime(formats=["%Y-%m-%d"]),
    help="include issues resolved before this date",
)
@click.pass_context
def resolved(
    ctx: click.Context, days: int, from_date: click.DateTime, to_date: click.DateTime
) -> None:
    """Report on recently closed issues."""
    options: ReportOptions = ctx.obj
    csv_file = f"{options.report_dir}/resolved.csv"
    server = JiraServer(ctx.obj.verbose, ctx.obj.jira_config)

    if from_date:
        from_date = from_date.date()
    if to_date:
        to_date = to_date.date()

    ResolvedReport(options, server).run(days, from_date, to_date, csv_file)


@jira.command()
@click.option("-g", "--group", is_flag=True, default=False, help="Group issues by epic")
@click.pass_context
def working(ctx: click.Context, group: bool) -> None:
    """Report on issues currently in progress."""
    options: ReportOptions = ctx.obj
    server = JiraServer(options.verbose, options.jira_config)
    WorkingReport(options, server).run(group)


@jira.command()
@click.argument("label")
@click.pass_context
def epicissues(ctx: click.Context, label: str) -> None:
    """Generate jql to search issues for epics with a given label"""
    options: ReportOptions = ctx.obj
    server = JiraServer(options.verbose, options.jira_config)
    issues = server.query_jql_issues(f"labels = {label} order by key")
    keys = [issue.key for issue in issues]
    print(f"'Epic Link' in ({', '.join(keys)})")


if __name__ == "__main__":
    jira()
