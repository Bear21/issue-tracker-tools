#! /usr/bin/env python
import click
import sys
import os
import webbrowser
from datetime import date

from jiralib.config import load_jira_config, load_project_config, ReportOptions
from jiralib.jira_builder import build_jira, JiraQueries
from jiralib.report_epics import EpicReport
from jiralib.report_progress import ProgressReport
from jiralib.report_resolved import ResolvedReport
from jiralib.report_issue_detail import IssueDetailReport
from jiralib.report_release_notes import ReleaseNotesReport
from jiralib.report_working import WorkingReport
from jiralib.cumulative_flow_graph import CumulativeFlowGraph


@click.group(context_settings=dict(help_option_names=['-h', '--help']))
@click.option("-v", "--verbose", is_flag=True)
@click.option("-j", "--jira-config",    type=click.Path(exists=True))
@click.option("-p", "--project-config", type=click.Path(exists=True))
@click.pass_context
def jira(ctx, verbose, project_config, jira_config):
    ctx.obj = build_report_options(verbose, project_config, jira_config)


def build_report_options(verbose: bool, project_config_file, jira_config_file) -> ReportOptions:
    jira_config_file = jira_config_file or os.path.expanduser("~/jiraconfig.yml")
    if verbose:
        print(f"Using jira config file '{jira_config_file}'")
    jira_config = load_jira_config(jira_config_file)

    project_config_file = project_config_file or jira_config_file
    if verbose:
        print(f"Using project config file '{project_config_file}'")

    project_config = load_project_config(project_config_file)

    return ReportOptions(verbose, project_config, jira_config)


@jira.command()
@click.option("-o", "--open-graph", is_flag=True, default=False, help="Open the graph after generation")
@click.pass_context
def cumulative_flow(ctx, open_graph):
    """Creates a cumulative flow graph from the progress log."""
    csv_file = f"{ctx.obj.report_dir}/{ctx.obj.project_config.project_name}/progress.csv"
    png_file = f"{ctx.obj.report_dir}/{ctx.obj.project_config.project_name}/cfd-{str(date.today())}.png"
    CumulativeFlowGraph(ctx.obj.project_config, csv_file, png_file).run(open_graph)


@jira.command()
@click.option("-s", "--subject", default="")
@click.pass_context
def epic_summary(ctx, subject):
    """Report on stories within epics."""
    jira = build_jira(ctx.obj.verbose, ctx.obj.jira_config)
    query = JiraQueries(jira)
    EpicReport(ctx.obj, query).run(subject)


def add_fix_version(jira, issue_key, new_fix_version):
    issue = jira.issue(issue_key)
    issue.add_field_value("fixVersions", {"name": new_fix_version})
    print(f"Added version {new_fix_version} to issue {issue.key}")


@jira.command()
@click.option("-o", "--open", is_flag=True, default=False, help="Open issue in a web browser")
@click.option("-f", "--update-fix-version", is_flag=False, type=click.STRING, help="Update issue with specified fix version")
@click.argument("issue_key")
@click.pass_context
def issue(ctx, open, update_fix_version, issue_key):
    """Report on issue detail."""
    if not issue_key:
        sys.exit("issue key required")

    jira = build_jira(ctx.obj.verbose, ctx.obj.jira_config)

    if open:
        webbrowser.open(f"{ctx.obj.jira_config.url}/browse/{issue_key}")
    elif update_fix_version:
        add_fix_version(jira, issue_key, update_fix_version)
    else:
        IssueDetailReport(ctx.obj, jira).run(issue_key)


@jira.command()
@click.option("-g", "--graph", is_flag=True, default=False, help="Generate cumulative flow graph")
@click.pass_context
def progress(ctx, graph):
    """Report on progress for a project."""
    project_config = ctx.obj.project_config
    csv_file = f"{ctx.obj.report_dir}/{project_config.project_name}/progress.csv"
    if graph:
        png_file = f"{ctx.obj.report_dir}/{project_config.project_name}/cfd-{str(date.today())}.png"
    else:
        png_file = None
    jira = build_jira(ctx.obj.verbose, ctx.obj.jira_config)
    ProgressReport(ctx.obj, jira).run(csv_file, png_file)


@jira.command()
@click.option("-t", "--no-tasks", is_flag=True, default=False, help="Exclude tasks")
@click.argument("issue_keys", nargs=-1)
@click.pass_context
def release(ctx, no_tasks, issue_keys):
    """Describes a list of tickets as release notes"""
    if not issue_keys:
        sys.exit("issue keys required for release report")

    jira = build_jira(ctx.obj.verbose, ctx.obj.jira_config)
    ReleaseNotesReport(ctx.obj, jira, no_tasks).run(issue_keys)


@jira.command()
@click.option("-d", "--days", type=click.INT, help="include issues resovled this many days prior to today")
@click.option("-f", "--from", "from_date", type=click.DateTime(formats=["%Y-%m-%d"]),
              help="include resolved issues from this date onwards")
@click.option("-t", "--to",   "to_date",   type=click.DateTime(formats=["%Y-%m-%d"]),
              help="include issues resolved before this date")
@click.pass_context
def resolved(ctx, days, from_date, to_date):
    """Report on recently closed issues."""
    csv_file = f"{ctx.obj.report_dir}/resolved.csv"
    jira = build_jira(ctx.obj.verbose, ctx.obj.jira_config)

    if from_date:
        from_date = from_date.date()
    if to_date:
        to_date = to_date.date()

    ResolvedReport(ctx.obj, jira).run(days, from_date, to_date, csv_file)


@jira.command()
@click.option("-g", "--group", is_flag=True, default=False, help="Group issues by epic")
@click.pass_context
def working(ctx, group):
    """Report on issues currently in progress."""
    jira = build_jira(ctx.obj.verbose, ctx.obj.jira_config)
    query = JiraQueries(jira)
    WorkingReport(ctx.obj, query).run(group)


@jira.command()
@click.argument("label")
@click.pass_context
def epicissues(ctx, label):
    """Generate jql to search issues for epics with a given label"""
    jira = build_jira(ctx.obj.verbose, ctx.obj.jira_config)
    query = JiraQueries(jira)
    issues = query.search_for_issues(f"labels = {label} order by key")
    keys = [issue.key for issue in issues]
    print(f"'Epic Link' in ({', '.join(keys)})")


if __name__ == "__main__":
    jira()
